%% name = NodePattern::Parser

%% {
  attr_reader :ast

  def s(type, children)
    NodePattern::Node.new(type, children)
  end
}

sp = /[\s]*/
SP = /[\s]+/
nodetype = /[a-zA-Z][a-zA-Z0-9_-]*/

root = sp start sp

start = &. statement:c { @ast = c  }

statement = node | any

exprs = expr:e1 SP exprs:e2 { [e1, *e2] } |
        expr:e { [e] }

expr = node | any | literal

node = '(' sp < nodetype > sp ')' { s(:node, [text]) } |
       '(' sp < nodetype > SP exprs:e sp ')' {
          children = [text, *e]
          s(:node, children)
        }

any = '_' {
  s(:any, [])
}

literal = symbol # | int | float | string

symbol = ':' < sym_text > { s(:literal, [text.to_sym]) }

# TODO
sym_text = /\w+/
